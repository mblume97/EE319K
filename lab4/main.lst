


ARM Macro Assembler    Page 1 


    1 00000000         ;****************** main.s ***************
    2 00000000         ; Program written by: ***Your Names**update this***
    3 00000000         ; Date Created: 2/14/2017
    4 00000000         ; Last Modified: 2/14/2017
    5 00000000         ; Brief description of the program
    6 00000000         ;   The LED toggles at 8 Hz and a varying duty-cycle
    7 00000000         ;   Repeat the functionality from Lab2-3 but now we want
                        you to 
    8 00000000         ;   insert debugging instruments which gather data (stat
                       e and timing)
    9 00000000         ;   to verify that the system is functioning as expected
                       .
   10 00000000         ; Hardware connections (External: One button and one LED
                       )
   11 00000000         ;  PE1 is Button input  (1 means pressed, 0 means not pr
                       essed)
   12 00000000         ;  PE0 is LED output (1 activates external LED on protob
                       oard)
   13 00000000         ;  PF2 is Blue LED on Launchpad used as a heartbeat
   14 00000000         ; Instrumentation data to be gathered is as follows:
   15 00000000         ; After Button(PE1) press collect one state and time ent
                       ry. 
   16 00000000         ; After Buttin(PE1) release, collect 7 state and
   17 00000000         ; time entries on each change in state of the LED(PE0): 
                       
   18 00000000         ; An entry is one 8-bit entry in the Data Buffer and one
                        
   19 00000000         ; 32-bit entry in the Time Buffer
   20 00000000         ;  The Data Buffer entry (byte) content has:
   21 00000000         ;    Lower nibble is state of LED (PE0)
   22 00000000         ;    Higher nibble is state of Button (PE1)
   23 00000000         ;  The Time Buffer entry (32-bit) has:
   24 00000000         ;    24-bit value of the SysTick's Current register (NVI
                       C_ST_CURRENT_R)
   25 00000000         ; Note: The size of both buffers is 50 entries. Once you
                        fill these
   26 00000000         ;       entries you should stop collecting data
   27 00000000         ; The heartbeat is an indicator of the running of the pr
                       ogram. 
   28 00000000         ; On each iteration of the main loop of your program tog
                       gle the 
   29 00000000         ; LED to indicate that your code(system) is live (not st
                       uck or dead).
   30 00000000         
   31 00000000 400243FC 
                       GPIO_PORTE_DATA_R
                               EQU              0x400243FC
   32 00000000 40024400 
                       GPIO_PORTE_DIR_R
                               EQU              0x40024400
   33 00000000 40024420 
                       GPIO_PORTE_AFSEL_R
                               EQU              0x40024420
   34 00000000 4002451C 
                       GPIO_PORTE_DEN_R
                               EQU              0x4002451C
   35 00000000         
   36 00000000 400253FC 
                       GPIO_PORTF_DATA_R



ARM Macro Assembler    Page 2 


                               EQU              0x400253FC
   37 00000000 40025400 
                       GPIO_PORTF_DIR_R
                               EQU              0x40025400
   38 00000000 40025420 
                       GPIO_PORTF_AFSEL_R
                               EQU              0x40025420
   39 00000000 40025510 
                       GPIO_PORTF_PUR_R
                               EQU              0x40025510
   40 00000000 4002551C 
                       GPIO_PORTF_DEN_R
                               EQU              0x4002551C
   41 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   42 00000000 E000E018 
                       NVIC_ST_CURRENT_R
                               EQU              0xE000E018
   43 00000000 0003D000 
                       DELAY10 EQU              0x00003D000 ; this is 12.5ms wh
                                                            ich is 10% of a 8HZ
                                                             frequency
   44 00000000 001E8000 
                       DELAY80 EQU              0x0001E8000
   45 00000000 0007A000 
                       DELAY20 EQU              0x00007A000 ; this is 25ms whic
                                                            h is 20% of a 8HZ f
                                                            requency
   46 00000000 000F4000 
                       DELAY40 EQU              0X0000F4000
   47 00000000 0016E000 
                       DELAY60 EQU              0x00016E000
   48 00000000 000030CC 
                       DELAY5  EQU              0x0000030CC ; this is 0.625ms w
                                                            hich is 5% of a 80H
                                                            Z frequency
   49 00000000 00262000 
                       DELAY100
                               EQU              0x000262000
   50 00000000 000009C3 
                       DELAY1  EQU              0x0000009C3
   51 00000000 0003D02D 
                       DELAY1001
                               EQU              0x00003D02D
   52 00000000         
   53 00000000         
   54 00000000         
   55 00000000         ; RAM Area
   56 00000000                 AREA             DATA, ALIGN=2
   57 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 3 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    DataBuffer
                               SPACE            50
   58 00000032 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 



ARM Macro Assembler    Page 4 


              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00    TimeBuffer
                               SPACE            50*4
   59 000000FA 00 00 00 
              00       DataPt  SPACE            4
   60 000000FE 00 00 00 
              00       TimePt  SPACE            4
   61 00000102 00      NEntries
                               DCB              0
   62 00000103         
   63 00000103         ;-UUU-Declare  and allocate space for your Buffers 
   64 00000103         ;    and any variables (like pointers and counters) here
                       
   65 00000103         
   66 00000103         ; ROM Area
   67 00000103                 IMPORT           TExaS_Init
   68 00000103                 IMPORT           SysTick_Init
   69 00000103         ;-UUU-Import routine(s) from other assembly files (like 
                       SysTick.s) here
   70 00000103                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   71 00000000                 THUMB
   72 00000000                 EXPORT           Start
   73 00000000         
   74 00000000         Start
   75 00000000 F7FF FFFE       BL               TExaS_Init  ; voltmeter, scope 
                                                            on PD3
   76 00000004         
   77 00000004 48D2            LDR              R0, =SYSCTL_RCGCGPIO_R ; Turn o
                                                            n the clock for Por
                                                            t E and Port F
   78 00000006 6801            LDR              R1, [R0]
   79 00000008 F041 0130       ORR              R1, #0x30
   80 0000000C 6001            STR              R1, [R0]
   81 0000000E BF00            NOP
   82 00000010 BF00            NOP
   83 00000012         
   84 00000012 48D0            LDR              R0, =GPIO_PORTE_DIR_R
   85 00000014 6801            LDR              R1, [R0]
   86 00000016 F021 0102       BIC              R1, #0x02   ; Make PE1 an input
                                                             = 0
   87 0000001A F041 0101       ORR              R1, #0x01   ; Make PE0 an outpu
                                                            t = 1
   88 0000001E 6001            STR              R1, [R0]



ARM Macro Assembler    Page 5 


   89 00000020         
   90 00000020 48CD            LDR              R0, =GPIO_PORTF_DIR_R
   91 00000022 6801            LDR              R1, [R0]
   92 00000024 F041 0104       ORR              R1, #0x04   ; Make PF2 an outpu
                                                            t = 1
   93 00000028 6001            STR              R1, [R0]
   94 0000002A         
   95 0000002A 48CC            LDR              R0, =GPIO_PORTE_AFSEL_R
   96 0000002C 6801            LDR              R1, [R0]
   97 0000002E F021 0103       BIC              R1, #0x03   ; Turn off alternat
                                                            e functions for Por
                                                            t E
   98 00000032 6001            STR              R1, [R0]
   99 00000034         
  100 00000034 48CA            LDR              R0, =GPIO_PORTF_AFSEL_R
  101 00000036 6801            LDR              R1, [R0]
  102 00000038 F021 0104       BIC              R1, #0x04   ; Turn off alternat
                                                            e functions for Por
                                                            t F
  103 0000003C 6001            STR              R1, [R0]
  104 0000003E         
  105 0000003E 48C9            LDR              R0, =GPIO_PORTE_DEN_R
  106 00000040 6801            LDR              R1, [R0]
  107 00000042 F041 0103       ORR              R1, #0x03   ; Enable PE1,PE0
  108 00000046 6001            STR              R1, [R0]
  109 00000048         
  110 00000048 48C7            LDR              R0, =GPIO_PORTF_DEN_R
  111 0000004A 6801            LDR              R1, [R0]
  112 0000004C F041 0104       ORR              R1, #0x04   ; Enable PF4
  113 00000050 6001            STR              R1, [R0]
  114 00000052         
  115 00000052 48C6            LDR              R0, =GPIO_PORTE_DATA_R
  116 00000054 F8DF C318       LDR              R12, =GPIO_PORTF_DATA_R
  117 00000058         
  118 00000058 F000 F939       BL               Debug_Init
  119 0000005C         
  120 0000005C B662            CPSIE            I           ; TExaS voltmeter, 
                                                            scope runs on inter
                                                            rupts
  121 0000005E         
  122 0000005E         ;R7, R9, AND R10
  123 0000005E         ; THIS IS THE LOOP THAT OF A 20% DUTY CYCLE AT 8HZ
  124 0000005E         LOOP20
  125 0000005E         ;  Toggle the heartbeat LED here 
  126 0000005E F8DC B000       LDR              R11, [R12]
  127 00000062 F08B 0B04       EOR              R11, #0x04
  128 00000066 F8CC B000       STR              R11, [R12]
  129 0000006A         
  130 0000006A 6801            LDR              R1, [R0]
  131 0000006C F081 0101       EOR              R1, #0x01
  132 00000070 6001            STR              R1, [R0]
  133 00000072 F44F 22F4       LDR              R2, =DELAY20
  134 00000076 F1B9 0F00       CMP              R9, #0
  135 0000007A D003            BEQ              DE201
  136 0000007C F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  137 00000080 F000 F941       BL               Debug_Capture ; (54 instruction
                                                            s * 12.5ns) = 675ns
                                                            /125ms * 100 = 0.00



ARM Macro Assembler    Page 6 


                                                            108% overhead
  138 00000084 1E52    DE201   SUBS             R2, R2, #1
  139 00000086 D1FD            BNE              DE201
  140 00000088 F081 0101       EOR              R1, #0x01
  141 0000008C 6001            STR              R1, [R0]
  142 0000008E F44F 12F4       LDR              R2, =DELAY80
  143 00000092 F1B9 0F00       CMP              R9, #0
  144 00000096 D003            BEQ              DE202
  145 00000098 F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  146 0000009C F000 F933       BL               Debug_Capture
  147 000000A0 1E52    DE202   SUBS             R2, R2, #1
  148 000000A2 D1FD            BNE              DE202
  149 000000A4         
  150 000000A4         
  151 000000A4 6801            LDR              R1, [R0]
  152 000000A6 F001 0502       AND              R5, R1, #0x02 ; R5 contains the
                                                             current state of t
                                                            he switch (positive
                                                             logic)
  153 000000AA 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            so we only dump onc
                                                            e
  154 000000AC D006            BEQ              NEXT20      ; Skip the next few
                                                             lines if it has be
                                                            en pressed before
  155 000000AE         
  156 000000AE EA46 0605       ORR              R6, R6, R5  ; If it is pressed 
                                                            put 1 in R6 
  157 000000B2 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            for the first time
  158 000000B4 D102            BNE              NEXT20      ; If not pressed ye
                                                            t, just loop back
  159 000000B6 F04F 0901       MOV              R9, #1      ; If it is pressed 
                                                            for the first time,
                                                             we want to dump on
                                                            ly once, R9 = 1
  160 000000BA E7D0            B                LOOP20
  161 000000BC         
  162 000000BC EA85 0806 
                       NEXT20  EOR              R8, R5, R6  ; If turned on (R6=
                                                            1) but then is rele
                                                            ased, this logic wi
                                                            ll turn R8 into a 1
                                                            
  163 000000C0 F1B8 0F02       CMP              R8, #0x02
  164 000000C4 D1CB            BNE              LOOP20      ; Keep looping with
                                                            out a dump if it ha
                                                            s not been released
                                                            
  165 000000C6 F04F 0907       MOV              R9, #7      ; Once it is releas
                                                            ed, we want to dump
                                                             7 times, R9 = 7
  166 000000CA F006 0600       AND              R6, R6, #0
  167 000000CE E7FF            B                LOOP40
  168 000000D0         
  169 000000D0         



ARM Macro Assembler    Page 7 


  170 000000D0         ; THIS IS A LOOP OF 40% DUTY CYCLE AT 8HZ  
  171 000000D0         LOOP40
  172 000000D0         ;  Toggle the heartbeat LED here 
  173 000000D0 F8DC B000       LDR              R11, [R12]
  174 000000D4 F08B 0B04       EOR              R11, #0x04
  175 000000D8 F8CC B000       STR              R11, [R12]
  176 000000DC         
  177 000000DC 6801            LDR              R1, [R0]
  178 000000DE F081 0101       EOR              R1, #0x01
  179 000000E2 6001            STR              R1, [R0]
  180 000000E4 F44F 2274       LDR              R2, =DELAY40
  181 000000E8 F1B9 0F00       CMP              R9, #0
  182 000000EC D003            BEQ              DE401
  183 000000EE F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  184 000000F2 F000 F908       BL               Debug_Capture
  185 000000F6 1E52    DE401   SUBS             R2, R2, #1
  186 000000F8 D1FD            BNE              DE401
  187 000000FA F081 0101       EOR              R1, #0x01
  188 000000FE 6001            STR              R1, [R0]
  189 00000100 F44F 12B7       LDR              R2, =DELAY60
  190 00000104 F1B9 0F00       CMP              R9, #0
  191 00000108 D003            BEQ              DE402
  192 0000010A F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  193 0000010E F000 F8FA       BL               Debug_Capture
  194 00000112 1E52    DE402   SUBS             R2, R2, #1
  195 00000114 D1FD            BNE              DE402
  196 00000116         
  197 00000116 6801            LDR              R1, [R0]
  198 00000118 F001 0502       AND              R5, R1, #0x02 ; R5 contains the
                                                             current state of t
                                                            he switch (positive
                                                             logic)
  199 0000011C 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            so we only dump onc
                                                            e
  200 0000011E D006            BEQ              NEXT40      ; Skip the next few
                                                             lines if it has be
                                                            en pressed before
  201 00000120         
  202 00000120 EA46 0605       ORR              R6, R6, R5  ; If it is pressed 
                                                            put 1 in R6 
  203 00000124 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            for the first time
  204 00000126 D102            BNE              NEXT40      ; If not pressed ye
                                                            t, just loop back
  205 00000128 F04F 0901       MOV              R9, #1      ; If it is pressed 
                                                            for the first time,
                                                             we want to dump on
                                                            ly once, R9 = 1
  206 0000012C E7D0            B                LOOP40
  207 0000012E         
  208 0000012E EA85 0806 
                       NEXT40  EOR              R8, R5, R6  ; If turned on (R6=
                                                            1) but then is rele
                                                            ased, this logic wi



ARM Macro Assembler    Page 8 


                                                            ll turn R8 into a 1
                                                            
  209 00000132 F1B8 0F02       CMP              R8, #0x02
  210 00000136 D1CB            BNE              LOOP40
  211 00000138 F04F 0907       MOV              R9, #7      ; Once it is releas
                                                            ed, we want to dump
                                                             7 times, R9 = 7
  212 0000013C F006 0600       AND              R6, R6, #0
  213 00000140 E7FF            B                LOOP60
  214 00000142         
  215 00000142         ; THIS IS A LOOP OF 60% DUTY CYCLE AT 8HZ
  216 00000142         LOOP60
  217 00000142         ;  Toggle the heartbeat LED here 
  218 00000142 F8DC B000       LDR              R11, [R12]
  219 00000146 F08B 0B04       EOR              R11, #0x04
  220 0000014A F8CC B000       STR              R11, [R12]
  221 0000014E         
  222 0000014E 6801            LDR              R1, [R0]
  223 00000150 F081 0101       EOR              R1, #0x01
  224 00000154 6001            STR              R1, [R0]
  225 00000156 F44F 12B7       LDR              R2, =DELAY60
  226 0000015A F1B9 0F00       CMP              R9, #0
  227 0000015E D003            BEQ              DE601
  228 00000160 F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  229 00000164 F000 F8CF       BL               Debug_Capture
  230 00000168 1E52    DE601   SUBS             R2, R2, #1
  231 0000016A D1FD            BNE              DE601
  232 0000016C F081 0101       EOR              R1, #0x01
  233 00000170 6001            STR              R1, [R0]
  234 00000172 F44F 2274       LDR              R2, =DELAY40
  235 00000176 F1B9 0F00       CMP              R9, #0
  236 0000017A D003            BEQ              DE602
  237 0000017C F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  238 00000180 F000 F8C1       BL               Debug_Capture
  239 00000184 1E52    DE602   SUBS             R2, R2, #1
  240 00000186 D1FD            BNE              DE602
  241 00000188         
  242 00000188         
  243 00000188 6801            LDR              R1, [R0]
  244 0000018A F001 0502       AND              R5, R1, #0x02 ; R5 contains the
                                                             current state of t
                                                            he switch (positive
                                                             logic)
  245 0000018E 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            so we only dump onc
                                                            e
  246 00000190 D006            BEQ              NEXT60      ; Skip the next few
                                                             lines if it has be
                                                            en pressed before
  247 00000192         
  248 00000192 EA46 0605       ORR              R6, R6, R5  ; If it is pressed 
                                                            put 1 in R6 
  249 00000196 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            for the first time
  250 00000198 D102            BNE              NEXT60      ; If not pressed ye



ARM Macro Assembler    Page 9 


                                                            t, just loop back
  251 0000019A F04F 0901       MOV              R9, #1      ; If it is pressed 
                                                            for the first time,
                                                             we want to dump on
                                                            ly once, R9 = 1
  252 0000019E E7D0            B                LOOP60
  253 000001A0         
  254 000001A0 EA85 0806 
                       NEXT60  EOR              R8, R5, R6  ; If turned on (R6=
                                                            1) but then is rele
                                                            ased, this logic wi
                                                            ll turn R8 into a 1
                                                            
  255 000001A4 F1B8 0F02       CMP              R8, #0x02
  256 000001A8 D1CB            BNE              LOOP60
  257 000001AA F04F 0907       MOV              R9, #7      ; Once it is releas
                                                            ed, we want to dump
                                                             7 times, R9 = 7
  258 000001AE F006 0600       AND              R6, R6, #0
  259 000001B2 E7FF            B                LOOP80
  260 000001B4         
  261 000001B4         ; THIS IS A LOOP OF 80% DUTY CYCLE AT 8HZ
  262 000001B4         LOOP80
  263 000001B4         ;  Toggle the heartbeat LED here 
  264 000001B4 F8DC B000       LDR              R11, [R12]
  265 000001B8 F08B 0B04       EOR              R11, #0x04
  266 000001BC F8CC B000       STR              R11, [R12]
  267 000001C0         
  268 000001C0 6801            LDR              R1, [R0]
  269 000001C2 F081 0101       EOR              R1, #0x01
  270 000001C6 6001            STR              R1, [R0]
  271 000001C8 F44F 12F4       LDR              R2, =DELAY80
  272 000001CC F1B9 0F00       CMP              R9, #0
  273 000001D0 D003            BEQ              DE801
  274 000001D2 F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  275 000001D6 F000 F896       BL               Debug_Capture
  276 000001DA 1E52    DE801   SUBS             R2, R2, #1
  277 000001DC D1FD            BNE              DE801
  278 000001DE F081 0101       EOR              R1, #0x01
  279 000001E2 6001            STR              R1, [R0]
  280 000001E4 F44F 22F4       LDR              R2, =DELAY20
  281 000001E8 F1B9 0F00       CMP              R9, #0
  282 000001EC D003            BEQ              DE802
  283 000001EE F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  284 000001F2 F000 F888       BL               Debug_Capture
  285 000001F6 1E52    DE802   SUBS             R2, R2, #1
  286 000001F8 D1FD            BNE              DE802
  287 000001FA         
  288 000001FA 6801            LDR              R1, [R0]
  289 000001FC F001 0502       AND              R5, R1, #0x02 ; R5 contains the
                                                             current state of t
                                                            he switch (positive
                                                             logic)
  290 00000200 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            so we only dump onc
                                                            e



ARM Macro Assembler    Page 10 


  291 00000202 D006            BEQ              NEXT80      ; Skip the next few
                                                             lines if it has be
                                                            en pressed before
  292 00000204         
  293 00000204 EA46 0605       ORR              R6, R6, R5  ; If it is pressed 
                                                            put 1 in R6 
  294 00000208 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            for the first time
  295 0000020A D102            BNE              NEXT80      ; If not pressed ye
                                                            t, just loop back
  296 0000020C F04F 0901       MOV              R9, #1      ; If it is pressed 
                                                            for the first time,
                                                             we want to dump on
                                                            ly once, R9 = 1 
  297 00000210 E7D0            B                LOOP80
  298 00000212         
  299 00000212 EA85 0806 
                       NEXT80  EOR              R8, R5, R6  ; If turned on (R6=
                                                            1) but then is rele
                                                            ased, this logic wi
                                                            ll turn R8 into a 1
                                                            
  300 00000216 F1B8 0F02       CMP              R8, #0x02
  301 0000021A D1CB            BNE              LOOP80
  302 0000021C F04F 0907       MOV              R9, #7      ; Once it is releas
                                                            ed, we want to dump
                                                             7 times, R9 = 7
  303 00000220 F006 0600       AND              R6, R6, #0
  304 00000224 E7FF            B                LOOP100
  305 00000226         
  306 00000226         ; THIS IS A LOOP OF 100% DUTY CYCLE AT 8HZ
  307 00000226         LOOP100
  308 00000226         ;  Toggle the heartbeat LED here 
  309 00000226 F8DC B000       LDR              R11, [R12]
  310 0000022A F08B 0B04       EOR              R11, #0x04
  311 0000022E F8CC B000       STR              R11, [R12]
  312 00000232         
  313 00000232 6801            LDR              R1, [R0]
  314 00000234 F041 0101       ORR              R1, #0x01
  315 00000238 6001            STR              R1, [R0]
  316 0000023A         
  317 0000023A 4A4E            LDR              R2, =DELAY100
  318 0000023C F1B9 0F00       CMP              R9, #0
  319 00000240 D003            BEQ              DE1001
  320 00000242 F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  321 00000246 F000 F85E       BL               Debug_Capture
  322 0000024A         
  323 0000024A 1E52    DE1001  SUBS             R2, R2, #1
  324 0000024C D1FD            BNE              DE1001
  325 0000024E         
  326 0000024E 6801            LDR              R1, [R0]
  327 00000250 F001 0502       AND              R5, R1, #0x02 ; R5 contains the
                                                             current state of t
                                                            he switch (positive
                                                             logic)
  328 00000254 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 



ARM Macro Assembler    Page 11 


                                                            so we only dump onc
                                                            e
  329 00000256 D006            BEQ              NEXT100     ; Skip the next few
                                                             lines if it has be
                                                            en pressed before
  330 00000258         
  331 00000258 EA46 0605       ORR              R6, R6, R5  ; If it is pressed 
                                                            put 1 in R6 
  332 0000025C 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            for the first time
  333 0000025E D102            BNE              NEXT100     ; If not pressed ye
                                                            t, just loop back
  334 00000260 F04F 0901       MOV              R9, #1      ; If it is pressed 
                                                            for the first time,
                                                             we want to dump on
                                                            ly once, R9 = 1 
  335 00000264 E7DF            B                LOOP100
  336 00000266         
  337 00000266 EA85 0806 
                       NEXT100 EOR              R8, R5, R6  ; If turned on (R6=
                                                            1) but then is rele
                                                            ased, this logic wi
                                                            ll turn R8 into a 1
                                                            
  338 0000026A F1B8 0F02       CMP              R8, #0x02
  339 0000026E D1DA            BNE              LOOP100
  340 00000270 F04F 0907       MOV              R9, #7      ; Once it is releas
                                                            ed, we want to dump
                                                             7 times, R9 = 7
  341 00000274 F006 0600       AND              R6, R6, #0
  342 00000278 E7FF            B                LOOP0
  343 0000027A         
  344 0000027A         ; THIS IS A LOOP OF 0% DUTY CYCLE AT 8HZ
  345 0000027A         LOOP0
  346 0000027A         ;  Toggle the heartbeat LED here 
  347 0000027A F8DC B000       LDR              R11, [R12]
  348 0000027E F08B 0B04       EOR              R11, #0x04
  349 00000282 F8CC B000       STR              R11, [R12]
  350 00000286         
  351 00000286 6801            LDR              R1, [R0]
  352 00000288 F021 0101       BIC              R1, #0x01
  353 0000028C 6001            STR              R1, [R0]
  354 0000028E         
  355 0000028E 4A39            LDR              R2, =DELAY100
  356 00000290 F1B9 0F00       CMP              R9, #0
  357 00000294 D003            BEQ              DE01
  358 00000296 F1A9 0901       SUB              R9, R9, #1  ; This would dump R
                                                            9 times
  359 0000029A F000 F834       BL               Debug_Capture
  360 0000029E         
  361 0000029E 1E52    DE01    SUBS             R2, R2, #1
  362 000002A0 D1FD            BNE              DE01
  363 000002A2         
  364 000002A2 6801            LDR              R1, [R0]
  365 000002A4 F001 0502       AND              R5, R1, #0x02 ; R5 contains the
                                                             current state of t
                                                            he switch (positive
                                                             logic)



ARM Macro Assembler    Page 12 


  366 000002A8 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            so we only dump onc
                                                            e
  367 000002AA D006            BEQ              NEXT0       ; Skip the next few
                                                             lines if it has be
                                                            en pressed before
  368 000002AC         
  369 000002AC         
  370 000002AC EA46 0605       ORR              R6, R6, R5  ; If it is pressed 
                                                            put 1 in R6 
  371 000002B0 2E02            CMP              R6, #0x02   ; Check to see if i
                                                            t has been pressed 
                                                            for the first time
  372 000002B2 D102            BNE              NEXT0       ; If not pressed ye
                                                            t, just loop back
  373 000002B4 F04F 0901       MOV              R9, #1      ; If it is pressed 
                                                            for the first time,
                                                             we want to dump on
                                                            ly once, R9 = 1 
  374 000002B8 E7DF            B                LOOP0
  375 000002BA         
  376 000002BA EA85 0806 
                       NEXT0   EOR              R8, R5, R6  ; If turned on (R6=
                                                            1) but then is rele
                                                            ased, this logic wi
                                                            ll turn R8 into a 1
                                                            
  377 000002BE F1B8 0F02       CMP              R8, #0x02
  378 000002C2 D1DA            BNE              LOOP0
  379 000002C4 F04F 0907       MOV              R9, #7      ; Once it is releas
                                                            ed, we want to dump
                                                             7 times, R9 = 7
  380 000002C8 F006 0600       AND              R6, R6, #0
  381 000002CC E6C7            B                LOOP20
  382 000002CE         
  383 000002CE         Debug_Init
  384 000002CE         
  385 000002CE B51F            PUSH             {R0,R1,R2,R3,R4,LR}
  386 000002D0 4929            LDR              R1, =DataBuffer
  387 000002D2 4A2A            LDR              R2, =DataPt
  388 000002D4 6011            STR              R1, [R2]
  389 000002D6 492A            LDR              R1, =TimeBuffer
  390 000002D8 4A2A            LDR              R2, =TimePt
  391 000002DA 6011            STR              R1, [R2]
  392 000002DC         
  393 000002DC F04F 0032       MOV              R0, #50
  394 000002E0 4925            LDR              R1, =DataBuffer
  395 000002E2 4A27            LDR              R2, =TimeBuffer
  396 000002E4 F04F 33FF       LDR              R3, =0xFFFFFFFF
  397 000002E8 F04F 04FF       MOV              R4, #0xFF
  398 000002EC         Fill_Array
  399 000002EC 700C            STRB             R4, [R1]
  400 000002EE 6013            STR              R3, [R2]
  401 000002F0 F101 0101       ADD              R1, R1, #1
  402 000002F4 F102 0204       ADD              R2, R2, #4
  403 000002F8 1E40            SUBS             R0, R0, #1
  404 000002FA D1F7            BNE              Fill_Array
  405 000002FC         



ARM Macro Assembler    Page 13 


  406 000002FC F7FF FFFE       BL               SysTick_Init
  407 00000300         
  408 00000300 E8BD 401F       POP              {R0,R1,R2,R3,R4,LR}
  409 00000304 4770            BX               LR
  410 00000306         
  411 00000306         
  412 00000306         Debug_Capture
  413 00000306         
  414 00000306 E92D 41FF       PUSH             {R0, R1, R2, R3, R4, R5, R6, R7
, R8, LR}
  415 0000030A 481F            LDR              R0, =NEntries
  416 0000030C 7801            LDRB             R1, [R0]
  417 0000030E 2932            CMP              R1, #50
  418 00000310 D01A            BEQ              Done_Capture
  419 00000312         
  420 00000312 4A16            LDR              R2, =GPIO_PORTE_DATA_R
  421 00000314 6813            LDR              R3, [R2]
  422 00000316 4C1D            LDR              R4, =NVIC_ST_CURRENT_R
  423 00000318 6825            LDR              R5, [R4]
  424 0000031A         
  425 0000031A F003 0601       AND              R6, R3, #0x01
  426 0000031E F003 0702       AND              R7, R3, #0x02
  427 00000322 EA4F 07C7       LSL              R7, #3
  428 00000326 EA46 0307       ORR              R3, R6, R7
  429 0000032A         
  430 0000032A 4E14            LDR              R6, =DataPt ; Store into DataBu
                                                            ffer, increment poi
                                                            nter by 1
  431 0000032C 6837            LDR              R7, [R6]
  432 0000032E 703B            STRB             R3, [R7]
  433 00000330 F107 0701       ADD              R7, R7, #1
  434 00000334 6037            STR              R7, [R6]
  435 00000336         
  436 00000336 4E13            LDR              R6, =TimePt ; Store into TimeBu
                                                            ffer, increment poi
                                                            nter by 4
  437 00000338 6837            LDR              R7, [R6]
  438 0000033A 603D            STR              R5, [R7]
  439 0000033C F107 0704       ADD              R7, R7, #4
  440 00000340 6037            STR              R7, [R6]
  441 00000342         
  442 00000342 F101 0101       ADD              R1, R1, #1  ; Update NEntries
  443 00000346 7001            STRB             R1, [R0]
  444 00000348         Done_Capture
  445 00000348 E8BD 41FF       POP              {R0, R1, R2, R3, R4, R5, R6, R7
, R8, LR}
  446 0000034C 4770            BX               LR
  447 0000034E         
  448 0000034E 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  449 00000350                 END                          ; end of file
              400FE608 
              40024400 
              40025400 
              40024420 
              40025420 
              4002451C 
              4002551C 



ARM Macro Assembler    Page 14 


              400243FC 
              400253FC 
              00262000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              E000E018 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\main.d
 -o.\main.o -I"C:\Users\Michael\Desktop\New folder\ARM\RV31\INC" -I"C:\Users\Mi
chael\Desktop\New folder\ARM\CMSIS\Include" -I"C:\Users\Michael\Desktop\New fol
der\ARM\Inc\Luminary" --predefine="__EVAL SETA 1" --list=.\main.lst main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 56 in file main.s
   Uses
      None
Comment: DATA unused
DataBuffer 00000000

Symbol: DataBuffer
   Definitions
      At line 57 in file main.s
   Uses
      At line 386 in file main.s
      At line 394 in file main.s

DataPt 000000FA

Symbol: DataPt
   Definitions
      At line 59 in file main.s
   Uses
      At line 387 in file main.s
      At line 430 in file main.s

NEntries 00000102

Symbol: NEntries
   Definitions
      At line 61 in file main.s
   Uses
      At line 415 in file main.s
Comment: NEntries used once
TimeBuffer 00000032

Symbol: TimeBuffer
   Definitions
      At line 58 in file main.s
   Uses
      At line 389 in file main.s
      At line 395 in file main.s

TimePt 000000FE

Symbol: TimePt
   Definitions
      At line 60 in file main.s
   Uses
      At line 390 in file main.s
      At line 436 in file main.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 70 in file main.s
   Uses
      None
Comment: .text unused
DE01 0000029E

Symbol: DE01
   Definitions
      At line 361 in file main.s
   Uses
      At line 357 in file main.s
      At line 362 in file main.s

DE1001 0000024A

Symbol: DE1001
   Definitions
      At line 323 in file main.s
   Uses
      At line 319 in file main.s
      At line 324 in file main.s

DE201 00000084

Symbol: DE201
   Definitions
      At line 138 in file main.s
   Uses
      At line 135 in file main.s
      At line 139 in file main.s

DE202 000000A0

Symbol: DE202
   Definitions
      At line 147 in file main.s
   Uses
      At line 144 in file main.s
      At line 148 in file main.s

DE401 000000F6

Symbol: DE401
   Definitions
      At line 185 in file main.s
   Uses
      At line 182 in file main.s
      At line 186 in file main.s

DE402 00000112

Symbol: DE402
   Definitions
      At line 194 in file main.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 191 in file main.s
      At line 195 in file main.s

DE601 00000168

Symbol: DE601
   Definitions
      At line 230 in file main.s
   Uses
      At line 227 in file main.s
      At line 231 in file main.s

DE602 00000184

Symbol: DE602
   Definitions
      At line 239 in file main.s
   Uses
      At line 236 in file main.s
      At line 240 in file main.s

DE801 000001DA

Symbol: DE801
   Definitions
      At line 276 in file main.s
   Uses
      At line 273 in file main.s
      At line 277 in file main.s

DE802 000001F6

Symbol: DE802
   Definitions
      At line 285 in file main.s
   Uses
      At line 282 in file main.s
      At line 286 in file main.s

Debug_Capture 00000306

Symbol: Debug_Capture
   Definitions
      At line 412 in file main.s
   Uses
      At line 137 in file main.s
      At line 146 in file main.s
      At line 184 in file main.s
      At line 193 in file main.s
      At line 229 in file main.s
      At line 238 in file main.s
      At line 275 in file main.s
      At line 284 in file main.s
      At line 321 in file main.s
      At line 359 in file main.s

Debug_Init 000002CE

Symbol: Debug_Init



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 383 in file main.s
   Uses
      At line 118 in file main.s
Comment: Debug_Init used once
Done_Capture 00000348

Symbol: Done_Capture
   Definitions
      At line 444 in file main.s
   Uses
      At line 418 in file main.s
Comment: Done_Capture used once
Fill_Array 000002EC

Symbol: Fill_Array
   Definitions
      At line 398 in file main.s
   Uses
      At line 404 in file main.s
Comment: Fill_Array used once
LOOP0 0000027A

Symbol: LOOP0
   Definitions
      At line 345 in file main.s
   Uses
      At line 342 in file main.s
      At line 374 in file main.s
      At line 378 in file main.s

LOOP100 00000226

Symbol: LOOP100
   Definitions
      At line 307 in file main.s
   Uses
      At line 304 in file main.s
      At line 335 in file main.s
      At line 339 in file main.s

LOOP20 0000005E

Symbol: LOOP20
   Definitions
      At line 124 in file main.s
   Uses
      At line 160 in file main.s
      At line 164 in file main.s
      At line 381 in file main.s

LOOP40 000000D0

Symbol: LOOP40
   Definitions
      At line 171 in file main.s
   Uses
      At line 167 in file main.s
      At line 206 in file main.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 210 in file main.s

LOOP60 00000142

Symbol: LOOP60
   Definitions
      At line 216 in file main.s
   Uses
      At line 213 in file main.s
      At line 252 in file main.s
      At line 256 in file main.s

LOOP80 000001B4

Symbol: LOOP80
   Definitions
      At line 262 in file main.s
   Uses
      At line 259 in file main.s
      At line 297 in file main.s
      At line 301 in file main.s

NEXT0 000002BA

Symbol: NEXT0
   Definitions
      At line 376 in file main.s
   Uses
      At line 367 in file main.s
      At line 372 in file main.s

NEXT100 00000266

Symbol: NEXT100
   Definitions
      At line 337 in file main.s
   Uses
      At line 329 in file main.s
      At line 333 in file main.s

NEXT20 000000BC

Symbol: NEXT20
   Definitions
      At line 162 in file main.s
   Uses
      At line 154 in file main.s
      At line 158 in file main.s

NEXT40 0000012E

Symbol: NEXT40
   Definitions
      At line 208 in file main.s
   Uses
      At line 200 in file main.s
      At line 204 in file main.s

NEXT60 000001A0



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


Symbol: NEXT60
   Definitions
      At line 254 in file main.s
   Uses
      At line 246 in file main.s
      At line 250 in file main.s

NEXT80 00000212

Symbol: NEXT80
   Definitions
      At line 299 in file main.s
   Uses
      At line 291 in file main.s
      At line 295 in file main.s

Start 00000000

Symbol: Start
   Definitions
      At line 74 in file main.s
   Uses
      At line 72 in file main.s
Comment: Start used once
28 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

DELAY1 000009C3

Symbol: DELAY1
   Definitions
      At line 50 in file main.s
   Uses
      None
Comment: DELAY1 unused
DELAY10 0003D000

Symbol: DELAY10
   Definitions
      At line 43 in file main.s
   Uses
      None
Comment: DELAY10 unused
DELAY100 00262000

Symbol: DELAY100
   Definitions
      At line 49 in file main.s
   Uses
      At line 317 in file main.s
      At line 355 in file main.s

DELAY1001 0003D02D

Symbol: DELAY1001
   Definitions
      At line 51 in file main.s
   Uses
      None
Comment: DELAY1001 unused
DELAY20 0007A000

Symbol: DELAY20
   Definitions
      At line 45 in file main.s
   Uses
      At line 133 in file main.s
      At line 280 in file main.s

DELAY40 000F4000

Symbol: DELAY40
   Definitions
      At line 46 in file main.s
   Uses
      At line 180 in file main.s
      At line 234 in file main.s

DELAY5 000030CC

Symbol: DELAY5
   Definitions
      At line 48 in file main.s
   Uses
      None
Comment: DELAY5 unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

DELAY60 0016E000

Symbol: DELAY60
   Definitions
      At line 47 in file main.s
   Uses
      At line 189 in file main.s
      At line 225 in file main.s

DELAY80 001E8000

Symbol: DELAY80
   Definitions
      At line 44 in file main.s
   Uses
      At line 142 in file main.s
      At line 271 in file main.s

GPIO_PORTE_AFSEL_R 40024420

Symbol: GPIO_PORTE_AFSEL_R
   Definitions
      At line 33 in file main.s
   Uses
      At line 95 in file main.s
Comment: GPIO_PORTE_AFSEL_R used once
GPIO_PORTE_DATA_R 400243FC

Symbol: GPIO_PORTE_DATA_R
   Definitions
      At line 31 in file main.s
   Uses
      At line 115 in file main.s
      At line 420 in file main.s

GPIO_PORTE_DEN_R 4002451C

Symbol: GPIO_PORTE_DEN_R
   Definitions
      At line 34 in file main.s
   Uses
      At line 105 in file main.s
Comment: GPIO_PORTE_DEN_R used once
GPIO_PORTE_DIR_R 40024400

Symbol: GPIO_PORTE_DIR_R
   Definitions
      At line 32 in file main.s
   Uses
      At line 84 in file main.s
Comment: GPIO_PORTE_DIR_R used once
GPIO_PORTF_AFSEL_R 40025420

Symbol: GPIO_PORTF_AFSEL_R
   Definitions
      At line 38 in file main.s
   Uses
      At line 100 in file main.s
Comment: GPIO_PORTF_AFSEL_R used once



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

GPIO_PORTF_DATA_R 400253FC

Symbol: GPIO_PORTF_DATA_R
   Definitions
      At line 36 in file main.s
   Uses
      At line 116 in file main.s
Comment: GPIO_PORTF_DATA_R used once
GPIO_PORTF_DEN_R 4002551C

Symbol: GPIO_PORTF_DEN_R
   Definitions
      At line 40 in file main.s
   Uses
      At line 110 in file main.s
Comment: GPIO_PORTF_DEN_R used once
GPIO_PORTF_DIR_R 40025400

Symbol: GPIO_PORTF_DIR_R
   Definitions
      At line 37 in file main.s
   Uses
      At line 90 in file main.s
Comment: GPIO_PORTF_DIR_R used once
GPIO_PORTF_PUR_R 40025510

Symbol: GPIO_PORTF_PUR_R
   Definitions
      At line 39 in file main.s
   Uses
      None
Comment: GPIO_PORTF_PUR_R unused
NVIC_ST_CURRENT_R E000E018

Symbol: NVIC_ST_CURRENT_R
   Definitions
      At line 42 in file main.s
   Uses
      At line 422 in file main.s
Comment: NVIC_ST_CURRENT_R used once
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 41 in file main.s
   Uses
      At line 77 in file main.s
Comment: SYSCTL_RCGCGPIO_R used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

SysTick_Init 00000000

Symbol: SysTick_Init
   Definitions
      At line 68 in file main.s
   Uses
      At line 406 in file main.s
Comment: SysTick_Init used once
TExaS_Init 00000000

Symbol: TExaS_Init
   Definitions
      At line 67 in file main.s
   Uses
      At line 75 in file main.s
Comment: TExaS_Init used once
2 symbols
389 symbols in table
